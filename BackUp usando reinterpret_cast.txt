#define _CRT_SECURE_NO_WARNINGS
#include <Windows.h>
#include <string>
#include <fstream>
#include "Identificadores.h"
#include <CommCtrl.h> //Agrega código para utilizar los DateTimePicker
#include <ctime>

using namespace std;

//Estructuras
struct Fecha {
	string fechaCompleta;
	byte dia;
	byte mes;
	unsigned int ano;
};

struct Hora {
	string horaCompleta;
	byte hora;
	byte minuto;
};

struct DatosCita {
	unsigned int NumCita;
	Fecha fechaCita;
	Hora horaCita;
	float costo;
	string motivoConsulta;
};

struct DatosCliente {
	string nombre;
	string apellido;
	string telefono;
};

struct DatosMascota {
	string nombre;
	string especie;
	bool esMacho;
};

struct Cita {
	DatosCita datosCita;
	DatosCliente datosCliente;
	DatosMascota datosMascota;
	Cita *ant, *sig;
}*origen, *aux, *ultimo;

//Procedimientos de ventanas
LRESULT CALLBACK procLogin(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procPerfil(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procCitaNueva(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procConfig(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procAgenda(HWND, UINT, WPARAM, LPARAM);

//Procedimientos de controles
LRESULT CALLBACK procTxtContra(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procTxtCedula(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procTxtNombre(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procTxtApellido(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procTxtTelefono(HWND, UINT, WPARAM, LPARAM);

LRESULT CALLBACK procRegCitaFechaCita(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procRegCitaHoraCita(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procRegCitaCostoCita(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procRegCitaMotivoCita(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procRegCitaNombreCliente(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procRegCitaApellidoCliente(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procRegCitaTelefonoCliente(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK procRegCitaNombreMascota(HWND, UINT, WPARAM, LPARAM);

//WNDPROC para detectar teclas
WNDPROC wndprocTxtCedula, wndprocTxtNombre, wndprocTxtApellido,
wndprocTxtTelefono, wndprocTxtCorreo, wndprocTxtContra,
wndprocRegCitaFechaCita, wndprocRegCitaHoraCita, wndprocRegCitaCostoCita,
wndprocRegCitaMotivoCita, wndprocRegCitaNombreCliente, wndprocRegCitaApellidoCliente,
wndprocRegCitaTelefonoCliente, wndprocRegCitaNombreMascota;

//Macros
bool RegistrarClases();
void InsertarControlesLogin(HWND);
void InsertarControlesPerfil(HWND);
void InsertarControlesCitaNueva(HWND);
void InsertarControlesAgenda(HWND);
void MostrarVentanaPrincipal();
void AgregarCita();
void GuardarTodo();
void CargarDatosCita();
void LimpiarCamposRegistroCita();
void ConfirmarSalir();

//Funciones
int CenterToScreenX(HWND);
int CenterToScreenY(HWND);
bool ValidarLogin(HWND);
bool ValidarCita();
bool EsNumero(string);
bool EsMoneda(string);
bool EsTexto(string);
void DesglozarFecha(string, byte *, byte *, unsigned int *);
void DesglozarTiempo(string, byte *, byte *);
string TraerNumNuevaCita();
int CompararFecha(Fecha, Fecha);
int CompararHora(Hora, Hora);

/*---------------Variables Globales-----------------*/

HMENU hmContenedor;

//WINDOWS
HWND hwndWndLogin, hwndWndPerfil, hwndWndCitaNueva, hwndWndConfig, hwndWndAgenda;

//HINSTANCE
HINSTANCE hInst;

//HBITMAPS
HBITMAP hbmFotoDoctor = (HBITMAP)LoadImage(NULL, "imagenes\\doctor.bmp", IMAGE_BITMAP, 150, 150, LR_LOADFROMFILE);

namespace Mensajes {

	int Error() {
		return MessageBox(GetActiveWindow(), "Se ha producido un error, favor de comunicarse con el administrador del sistema.", "ERROR", MB_ICONERROR | MB_OK);
	}

	int OperacionNoValida(string mensaje) {
		return MessageBox(GetActiveWindow(), mensaje.c_str(), "Operación no válida", MB_ICONEXCLAMATION | MB_OK);
	}

	int OperacionExitosa(string mensaje) {
		return MessageBox(GetActiveWindow(), mensaje.c_str(), "Operación exitosa", MB_ICONINFORMATION | MB_OK);
	}

	int Confirmacion(string mensaje) {
		return MessageBox(GetActiveWindow(), mensaje.c_str(), "Confirmación", MB_ICONQUESTION | MB_YESNO | MB_APPLMODAL);
	}
};

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
	hInst = hInstance; //Hacemos global la instancia de la aplicación

	if (!RegistrarClases()) {
		Mensajes::Error();
		return 0;
	}
	
	//hwndWndLogin = CreateWindowEx( //Creamos nuestra ventana
	//	0,
	//	"wcWndLogin",
	//	"Iniciar sesión",
	//	WS_POPUP,
	//	0,
	//	0,
	//	200,
	//	150,
	//	HWND_DESKTOP,
	//	NULL,
	//	hInstance,
	//	NULL
	//);

	////Centramos nuestra ventana y la mostramos
	//SetWindowPos(hwndWndLogin, 0, CenterToScreenX(hwndWndLogin), CenterToScreenY(hwndWndLogin), 0, 0, SWP_NOZORDER | SWP_NOSIZE);
	//ShowWindow(hwndWndLogin, SW_SHOW);

	MostrarVentanaPrincipal();

	MSG msg;
	ZeroMemory(&msg, sizeof(MSG));

	//Corazón de nuestra aplicación
	while (TRUE == GetMessage(&msg, 0, 0, 0)) {
		if (IsDialogMessage(hwndWndLogin, &msg)) continue;
		if (IsDialogMessage(hwndWndPerfil, &msg)) continue;
		//if (IsDialogMessage(hwndWndCitaNueva, &msg)) continue;
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	return msg.wParam;
}

void InsertarControlesLogin(HWND hWnd) {
	CreateWindowEx(0, "STATIC", "Usuario: ", WS_CHILD | WS_VISIBLE,
		25, 25, 55, 15, hWnd,
		(HMENU)LBL_USUARIO, hInst, NULL);

	HWND hwndTxtUsuario = CreateWindowEx(0, "EDIT", "", WS_CHILD | WS_VISIBLE | WS_BORDER | WS_TABSTOP | ES_AUTOHSCROLL,
		25, 45, 150, 20, hWnd, (HMENU)TXT_USUARIO, hInst, NULL);
	SendMessage(hwndTxtUsuario, EM_LIMITTEXT, WPARAM(20), 0); //Ponemos un límite para escribir caracteres
	SetFocus(hwndTxtUsuario);

	CreateWindowEx(0, "STATIC", "Contraseña: ",
		WS_CHILD | WS_VISIBLE,
		25, 70, 78, 15, hWnd,
		(HMENU)LBL_PASS, hInst, NULL);

	HWND hwndTxtContra = CreateWindowEx(0, "EDIT", "", WS_CHILD | WS_VISIBLE | WS_BORDER | WS_TABSTOP | ES_AUTOHSCROLL | ES_PASSWORD,
		25, 90, 150, 20, hWnd, (HMENU)TXT_PASS, hInst, NULL);
	SendMessage(hwndTxtContra, EM_LIMITTEXT, WPARAM(25), 0); //Ponemos un límite para escribir caracteres
	wndprocTxtContra = (WNDPROC)SetWindowLongPtr(hwndTxtContra, GWL_WNDPROC, (LONG_PTR)procTxtContra);

	CreateWindowEx(0, "BUTTON", "Entrar", WS_CHILD | WS_VISIBLE | WS_BORDER,
		60, 115, 80, 25, hWnd, (HMENU)BTN_ENTRAR, hInst, NULL);
}

void InsertarControlesPerfil(HWND hWnd) {

	HMENU hmContenedorMenuPerfil;
	hmContenedorMenuPerfil = CreateMenu();

	AppendMenu(hmContenedorMenuPerfil, MF_STRING | MF_POPUP, MENUPERFIL_EDITAR, "Editar perfil");
	SetMenu(hWnd, hmContenedorMenuPerfil);

	//--------------- Insertar resto de controles ------------------//
	CreateWindowEx(0, "STATIC", "ERROR",
		WS_CHILD | WS_BORDER | SS_CENTER,
		0, 0, 505, 18, hWnd, (HMENU)LBL_INFODOCTOR_ERROR, hInst, NULL);

	CreateWindowEx(0, "STATIC", "Cédula: ",
		WS_VISIBLE | WS_CHILD,
		20, 30, 100, 20, hWnd, NULL, hInst, NULL);

	HWND hwndTxtCedula = CreateWindowEx(0, "EDIT", "",
		WS_VISIBLE | WS_CHILD | WS_BORDER | WS_DISABLED,
		100, 30, 125, 20, hWnd, (HMENU)TXT_CEDULADOCTOR, hInst, NULL);
	wndprocTxtCedula = (WNDPROC)SetWindowLongPtr(hwndTxtCedula, GWL_WNDPROC, (LONG_PTR)procTxtCedula);

	CreateWindowEx(0, "STATIC", "Nombre: ",
		WS_VISIBLE | WS_CHILD,
		20, 60, 100, 20, hWnd, NULL, hInst, NULL);

	HWND hwndTxtNombre = CreateWindowEx(0, "EDIT", "",
		WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | WS_DISABLED,
		100, 60, 200, 20, hWnd, (HMENU)TXT_NOMBREDOCTOR, hInst, NULL);
	wndprocTxtNombre = (WNDPROC)SetWindowLongPtr(hwndTxtNombre, GWL_WNDPROC, (LONG_PTR)procTxtNombre);

	CreateWindowEx(0, "STATIC", "Apellido: ",
		WS_VISIBLE | WS_CHILD,
		20, 90, 100, 20, hWnd, NULL, hInst, NULL);

	HWND hwndTxtApellido = CreateWindowEx(0, "EDIT", "",
		WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | WS_DISABLED,
		100, 90, 200, 20, hWnd, (HMENU)TXT_APELLIDODOCTOR, hInst, NULL);
	wndprocTxtApellido = (WNDPROC)SetWindowLongPtr(hwndTxtApellido, GWL_WNDPROC, (LONG_PTR)procTxtApellido);

	CreateWindowEx(0, "STATIC", "Teléfono: ",
		WS_VISIBLE | WS_CHILD,
		20, 120, 100, 20, hWnd, NULL, hInst, NULL);

	HWND hwndTxtTelefono = CreateWindowEx(0, "EDIT", "",
		WS_VISIBLE | WS_CHILD | WS_BORDER | WS_DISABLED,
		100, 120, 100, 20, hWnd, (HMENU)TXT_TELEFONODOCTOR, hInst, NULL);
	wndprocTxtTelefono = (WNDPROC)SetWindowLongPtr(hwndTxtTelefono, GWL_WNDPROC, (LONG_PTR)procTxtTelefono);

	CreateWindowEx(0, "STATIC", "Correo: ",
		WS_VISIBLE | WS_CHILD,
		20, 150, 100, 20, hWnd, NULL, hInst, NULL);

	CreateWindowEx(0, "EDIT", "",
		WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | WS_DISABLED,
		100, 150, 200, 20, hWnd, (HMENU)TXT_CORREODOCTOR, hInst, NULL);

	CreateWindowEx(0, "BUTTON", "Guardar",
		WS_TABSTOP | WS_CHILD | WS_BORDER,
		20, 190, 80, 25, hWnd, (HMENU)BTN_GUARDARINFODOCTOR, hInst, NULL);

	CreateWindowEx(0, "BUTTON", "Cancelar",
		WS_TABSTOP | WS_CHILD | WS_BORDER,
		110, 190, 80, 25, hWnd, (HMENU)BTN_CANCELAREDICION, hInst, NULL);


}

void InsertarControlesCitaNueva(HWND hWnd) {
	// ------------------ DATOS DE LA CITA ------------------//
		HWND grpDatosCita = CreateWindowEx(0, "BUTTON", "Datos de la cita",
			BS_GROUPBOX | WS_VISIBLE | WS_CHILD | WS_GROUP,
			10, 10, 565, 190, hWnd, (HMENU)GRP_DATOSCITA, hInst, NULL);

		CreateWindowEx(0, "STATIC", "No cita:  ",
			WS_VISIBLE | WS_CHILD,
			10, 30, 100, 20, grpDatosCita, NULL, hInst, NULL);

		HWND hwndTxtNumCita = CreateWindowEx(0, "EDIT", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER | ES_NUMBER | WS_DISABLED,
			115, 30, 100, 20, grpDatosCita, (HMENU)TXT_NUMEROCITA, hInst, NULL);
		SetWindowText(hwndTxtNumCita, TraerNumNuevaCita().c_str());

		CreateWindowEx(0, "STATIC", "Fecha de cita:  ",
			WS_VISIBLE | WS_CHILD,
			245, 30, 100, 20, grpDatosCita, NULL, hInst, NULL);

		HWND hwndFechaCita = CreateWindowEx(0, "SysDateTimePick32", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER | DTS_SHOWNONE,
			350, 30, 200, 25, grpDatosCita, (HMENU)DT_FECHACITA, hInst, NULL);
		wndprocRegCitaFechaCita = (WNDPROC)SetWindowLongPtr(hwndFechaCita, GWL_WNDPROC, (LONG_PTR)procRegCitaFechaCita);

		CreateWindowEx(0, "STATIC", "Hora de cita:  ",
			WS_VISIBLE | WS_CHILD,
			10, 60, 100, 20, grpDatosCita, NULL, hInst, NULL);

		HWND dpHoraCita = CreateWindowEx(0, "SysDateTimePick32", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER | DTS_TIMEFORMAT,
			115, 60, 120, 25, grpDatosCita, (HMENU)DT_HORACITA, hInst, NULL);
		//DateTime_SetFormat(dpHoraCita, "'H':'mm'");
		SendMessage(dpHoraCita, DTM_SETFORMAT, 0, (LPARAM)"HH:mm");
		wndprocRegCitaHoraCita = (WNDPROC)SetWindowLongPtr(dpHoraCita, GWL_WNDPROC, (LONG_PTR)procRegCitaHoraCita);

		CreateWindowEx(0, "STATIC", "Costo:  ",
			WS_VISIBLE | WS_CHILD,
			245, 60, 100, 20, grpDatosCita, NULL, hInst, NULL);

		HWND hwndTxtCostoCita = CreateWindowEx(0, "EDIT", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER,
			350, 60, 100, 20, grpDatosCita, (HMENU)TXT_COSTOCITA, hInst, NULL);
		wndprocRegCitaCostoCita = (WNDPROC)SetWindowLongPtr(hwndTxtCostoCita, GWL_WNDPROC, (LONG_PTR)procRegCitaCostoCita);

		CreateWindowEx(0, "STATIC", "Motivo de consulta:  ",
			WS_VISIBLE | WS_CHILD,
			10, 90, 150, 20, grpDatosCita, NULL, hInst, NULL);

		HWND hwndTxtMotivo = CreateWindowEx(0, "EDIT", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER | ES_MULTILINE | ES_AUTOVSCROLL,
			10, 115, 400, 60, grpDatosCita, (HMENU)TXT_MOTIVOCONSULTA, hInst, NULL);
		wndprocRegCitaMotivoCita = (WNDPROC)SetWindowLongPtr(hwndTxtMotivo, GWL_WNDPROC, (LONG_PTR)procRegCitaMotivoCita);
	// ------------------ DATOS DEL CLIENTE ------------------//
		HWND grpDatosCliente = CreateWindowEx(0, "BUTTON", "Datos del cliente",
			BS_GROUPBOX | WS_VISIBLE | WS_CHILD | WS_GROUP,
			10, 210, 565, 125, hWnd, (HMENU)GRP_DATOSCLIENTE, hInst, NULL);

		CreateWindowEx(0, "STATIC", "Nombre:  ",
			WS_VISIBLE | WS_CHILD,
			10, 30, 100, 20, grpDatosCliente, NULL, hInst, NULL);

		HWND hwndNombreCliente = CreateWindowEx(0, "EDIT", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL,
			115, 30, 250, 20, grpDatosCliente, (HMENU)TXT_NOMBRECLIENTE, hInst, NULL);
		wndprocRegCitaNombreCliente = (WNDPROC)SetWindowLongPtr(hwndNombreCliente, GWL_WNDPROC, (LONG_PTR)procRegCitaNombreCliente);

		CreateWindowEx(0, "STATIC", "Apellido:  ",
			WS_VISIBLE | WS_CHILD,
			10, 60, 100, 20, grpDatosCliente, NULL, hInst, NULL);

		HWND hwndApellidoCliente = CreateWindowEx(0, "EDIT", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL,
			115, 60, 250, 20, grpDatosCliente, (HMENU)TXT_APELLIDOCLIENTE, hInst, NULL);
		wndprocRegCitaApellidoCliente = (WNDPROC)SetWindowLongPtr(hwndApellidoCliente, GWL_WNDPROC, (LONG_PTR)procRegCitaApellidoCliente);

		CreateWindowEx(0, "STATIC", "Teléfono:  ",
			WS_VISIBLE | WS_CHILD,
			10, 90, 100, 20, grpDatosCliente, NULL, hInst, NULL);

		HWND hwndTelefonoCliente = CreateWindowEx(0, "EDIT", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER | ES_NUMBER,
			115, 90, 150, 20, grpDatosCliente, (HMENU)TXT_TELEFONOCLIENTE, hInst, NULL);
		wndprocRegCitaTelefonoCliente = (WNDPROC)SetWindowLongPtr(hwndTelefonoCliente, GWL_WNDPROC, (LONG_PTR)procRegCitaTelefonoCliente);

	// ------------------ DATOS DE LA MASCOTA ------------------//
	
		HWND grpDatosMascota = CreateWindowEx(0, "BUTTON", "Datos de la mascota",
			BS_GROUPBOX | WS_VISIBLE | WS_CHILD | WS_GROUP,
			10, 345, 565, 125, hWnd, (HMENU)GRP_DATOSMASCOTA, hInst, NULL);

		CreateWindowEx(0, "STATIC", "Nombre:  ",
			WS_VISIBLE | WS_CHILD,
			10, 30, 100, 20, grpDatosMascota, NULL, hInst, NULL);

		HWND hwndNombreMascota = CreateWindowEx(0, "EDIT", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER,
			115, 30, 150, 20, grpDatosMascota, (HMENU)TXT_NOMBREMASCOTA, hInst, NULL);
		wndprocRegCitaNombreMascota = (WNDPROC)SetWindowLongPtr(hwndNombreMascota, GWL_WNDPROC, (LONG_PTR)procRegCitaNombreMascota);

		CreateWindowEx(0, "STATIC", "Especie:  ",
			WS_VISIBLE | WS_CHILD,
			10, 60, 100, 20, grpDatosMascota, NULL, hInst, NULL);

		HWND hwndCbEspecie = CreateWindowEx(0, "COMBOBOX", "",
			WS_VISIBLE | WS_CHILD | WS_BORDER | CBS_DROPDOWN | WS_VSCROLL | CBS_SIMPLE,
			115, 60, 150, 120, grpDatosMascota, (HMENU)CB_ESPECIEMASCOTA, hInst, NULL);

		SendMessage(hwndCbEspecie, CB_ADDSTRING, 0, (LPARAM)"PERRO");
		SendMessage(hwndCbEspecie, CB_ADDSTRING, 0, (LPARAM)"GATO");
		SendMessage(hwndCbEspecie, CB_ADDSTRING, 0, (LPARAM)"ERIZO");
		SendMessage(hwndCbEspecie, CB_ADDSTRING, 0, (LPARAM)"HAMSTER");
		SendMessage(hwndCbEspecie, CB_ADDSTRING, 0, (LPARAM)"CUYO");
		SendMessage(hwndCbEspecie, CB_ADDSTRING, 0, (LPARAM)"AVE");
		SendMessage(hwndCbEspecie, CB_ADDSTRING, 0, (LPARAM)"REPTIL");

		CreateWindowEx(0, "BUTTON", "Macho",
			BS_AUTORADIOBUTTON | WS_VISIBLE | WS_CHILD,
			10, 90, 100, 20, grpDatosMascota, (HMENU)RB_MACHOMASCOTA, hInst, NULL);

		CreateWindowEx(0, "BUTTON", "Hembra",
			BS_AUTORADIOBUTTON | WS_VISIBLE | WS_CHILD,
			115, 90, 100, 20, grpDatosMascota, (HMENU)RB_HEMBRAMASCOTA, hInst, NULL);

		CheckRadioButton(grpDatosMascota, RB_MACHOMASCOTA, RB_HEMBRAMASCOTA, RB_MACHOMASCOTA);
		
	
	// --------- Fuera de todos los groupbox ----------------//

	CreateWindowEx(0, "BUTTON", "Registrar cita",
		WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON | WS_BORDER,
		10, 480, 100, 30, hWnd, (HMENU)BTN_REGISTRARCITA, hInst, NULL);

	CreateWindowEx(0, "BUTTON", "Limpiar",
		WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON | WS_BORDER,
		115, 480, 100, 30, hWnd, (HMENU)BTN_LIMPIARREGISTRARCITA, hInst, NULL);

	SetFocus(hwndFechaCita);
}

void InsertarControlesAgenda(HWND hWnd) {

	//-------------- Insertar menu ---------------//
	HMENU hmCitas;
	hmContenedor = CreateMenu();
	hmCitas = CreateMenu();

	AppendMenu(hmCitas, MF_STRING, MENU_CITAS_NUEVA, "Nueva cita");
	AppendMenu(hmCitas, MF_STRING, MENU_CITAS_EDITAR, "Editar cita");
	AppendMenu(hmCitas, MF_STRING, MENU_CITAS_CANCELAR, "Cancelar cita");

	AppendMenu(hmContenedor, MF_STRING | MF_POPUP, NULL, "");
	AppendMenu(hmContenedor, MF_STRING | MF_POPUP, MENU_PERFIL, "Alejandro Hdz");
	AppendMenu(hmContenedor, MF_STRING | MF_POPUP, (UINT)hmCitas, "Citas");
	AppendMenu(hmContenedor, MF_STRING | MF_POPUP, MENU_SALIR, "Salir");

	HBITMAP bitdoctor = (HBITMAP)LoadImage(NULL, "imagenes\\doctor.bmp", IMAGE_BITMAP, 25, 25, LR_LOADFROMFILE);
	HBITMAP bitimage = (HBITMAP)LoadImage(NULL, "imagenes\\page.bmp", IMAGE_BITMAP, 15, 15, LR_LOADFROMFILE);
	SetMenuItemBitmaps(hmCitas, 0, MF_BYPOSITION, bitimage, bitimage);
	SetMenuItemBitmaps(hmCitas, 1, MF_BYPOSITION, bitimage, bitimage);
	SetMenuItemBitmaps(hmCitas, 2, MF_BYPOSITION, bitimage, bitimage);
	ModifyMenu(hmContenedor, 0, MF_BYPOSITION | MF_BITMAP | MF_STRING, 0, (LPCTSTR)bitdoctor);
	SetMenu(hWnd, hmContenedor);
	//----------------------------------------------------//
	CreateWindowEx(0, "STATIC", "Agenda",
		WS_CHILD | WS_VISIBLE,
		20, 20, 100, 20, hWnd, NULL, hInst, NULL);

	HWND lv = CreateWindowEx(0, WC_LISTVIEW, "",
		WS_VISIBLE | WS_BORDER | WS_CHILD | LVS_REPORT | LVS_EDITLABELS,
		20, 50, 560, 300, hWnd, NULL, hInst, NULL);
	LVCOLUMN colFecha, colHora, colCte, colAccion;

	colFecha.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT;
	colFecha.fmt = LVCFMT_LEFT;
	colFecha.cx = 100;
	colFecha.pszText = (LPSTR)"Fecha";

	colHora.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT;
	colHora.fmt = LVCFMT_LEFT;
	colHora.cx = 60;
	colHora.pszText = (LPSTR)"Hora";

	colCte.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT;
	colCte.fmt = LVCFMT_LEFT;
	colCte.cx = 300;
	colCte.pszText = (LPSTR)"Cliente";

	colAccion.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT;
	colAccion.fmt = LVCFMT_LEFT;
	colAccion.cx = 100;
	colAccion.pszText = (LPSTR)"Acción";

	ListView_InsertColumn(lv, 0, &colFecha);
	ListView_InsertColumn(lv, 1, &colHora);
	ListView_InsertColumn(lv, 2, &colCte);
	ListView_InsertColumn(lv, 3, &colAccion);

	LVITEM item;
	item.mask = LVIF_TEXT;

	if (origen != NULL) {

		string strNombreCliente;
		aux = origen;
		for (int i = 0; i < ultimo->datosCita.NumCita; i++) {
			item.iSubItem = 0;
			item.pszText = (LPSTR)aux->datosCita.fechaCita.fechaCompleta.c_str();
			item.iItem = i;
			ListView_InsertItem(lv, &item);

			item.iSubItem = 1;
			item.pszText = (LPSTR)aux->datosCita.horaCita.horaCompleta.c_str();
			ListView_SetItem(lv, &item);

			item.iSubItem = 2;
			strNombreCliente = aux->datosCliente.nombre + " " + aux->datosCliente.apellido;
			item.pszText = (LPSTR)strNombreCliente.c_str();
			ListView_SetItem(lv, &item);

			aux = aux->sig;
		}
	}
}

void MostrarVentanaPrincipal() {
	//Creamos nuestra ventana y la mostramos
	hwndWndAgenda = CreateWindowEx(0, "wcWndAgenda", "Agenda de veterinaria",
		WS_SYSMENU | WS_VISIBLE,
		0, 0, 800, 500, NULL, 0, hInst, NULL);
	SetWindowPos(hwndWndAgenda, HWND_TOPMOST, CenterToScreenX(hwndWndAgenda), CenterToScreenY(hwndWndAgenda), 0, 0, SWP_NOZORDER | SWP_NOSIZE);
	ShowWindow(hwndWndAgenda, SW_SHOW);
}

bool RegistrarClases() {
	WNDCLASSEX wc;

	//Llenamos los datos para nuestra ventana principal de login
	ZeroMemory(&wc, sizeof(WNDCLASSEX));
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.style = CS_DBLCLKS;
	wc.lpfnWndProc = (WNDPROC)procLogin;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = hInst;
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)COLOR_BACKGROUND;
	wc.lpszMenuName = NULL;
	wc.lpszClassName = "wcWndLogin";
	if (!RegisterClassEx(&wc)) return false; //Registramos nuestra venta, sino es posible salimos de la app

	ZeroMemory(&wc, sizeof(WNDCLASSEX));
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.hInstance = hInst;
	wc.lpfnWndProc = (WNDPROC)procPerfil;
	wc.lpszClassName = "wcWndPerfil";
	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hbrBackground = CreateSolidBrush(RGB(139, 188, 255));
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	wc.lpszMenuName = NULL;
	if (!RegisterClassEx(&wc)) return false; //Registramos nuestra venta, sino es posible salimos de la app

	ZeroMemory(&wc, sizeof(WNDCLASSEX));
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.hInstance = hInst;
	wc.lpfnWndProc = (WNDPROC)procCitaNueva;
	wc.lpszClassName = "wcWndCitaNueva";
	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hbrBackground = (HBRUSH)COLOR_BACKGROUND;
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	wc.lpszMenuName = NULL;
	if (!RegisterClassEx(&wc)) return false; //Registramos nuestra venta, sino es posible salimos de la app

	ZeroMemory(&wc, sizeof(WNDCLASSEX));
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.hInstance = hInst;
	wc.lpfnWndProc = (WNDPROC)procConfig;
	wc.lpszClassName = "wcWndConfig";
	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hbrBackground = (HBRUSH)COLOR_BACKGROUND;
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	wc.lpszMenuName = NULL;
	if (!RegisterClassEx(&wc)) return false; //Registramos nuestra venta, sino es posible salimos de la app

	ZeroMemory(&wc, sizeof(WNDCLASSEX));
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.hInstance = hInst;
	wc.lpfnWndProc = (WNDPROC)procAgenda;
	wc.lpszClassName = "wcWndAgenda";
	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hbrBackground = (HBRUSH)COLOR_BACKGROUND;
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	wc.lpszMenuName = NULL;
	if (!RegisterClassEx(&wc)) return false; //Registramos nuestra venta, sino es posible salimos de la app

	return true;
}

int CenterToScreenX(HWND ventana) {
	RECT rc;
	GetWindowRect(ventana, &rc);
	return ((GetSystemMetrics(SM_CXSCREEN) - rc.right) / 2);
}

int CenterToScreenY(HWND ventana) {
	RECT rc;
	GetWindowRect(ventana, &rc);
	return ((GetSystemMetrics(SM_CYSCREEN) - rc.bottom) / 2);
}

bool ValidarLogin(HWND hWnd) {
	//Variables
	char vUsuario[20] = "", vContra[25] = "";
	HWND hwndTxtUsuario = GetDlgItem(hwndWndLogin, TXT_USUARIO);
	HWND hwndTxtContra = GetDlgItem(hwndWndLogin, TXT_PASS);

	//Guardamos el contenido de los textbox
	SendMessage(hwndTxtUsuario, WM_GETTEXT, 20, (LPARAM)vUsuario);
	SendMessage(hwndTxtContra, WM_GETTEXT, 25, (LPARAM)vContra);

	//Validamos que no estén vacíos los campos
	if (strcmp(vUsuario, "") == 0 || strcmp(vContra, "") == 0) {
		Mensajes::OperacionNoValida("No puede haber campos vacíos");
		SetFocus(hwndTxtUsuario); //Ponemos el foco en el campo 'usuario'
		return false;
	}

	//Validamos que sea el usuario correcto
	if (strcmp(vUsuario, "alex") == 0 && strcmp(vContra, "123") == 0) return true;
	else {
		Mensajes::OperacionNoValida("Datos incorrectos");

		//Limpiamos los campos y ponemos el foco en el campo 'usuario'
		SetWindowText(hwndTxtUsuario, "");
		SetWindowText(hwndTxtContra, "");
		SetFocus(hwndTxtUsuario);
	}
	return false;
}

LRESULT CALLBACK procLogin(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_CREATE:
		InsertarControlesLogin(hWnd); //Llamamos a la macro para insertar los controles en la ventana
		break;
	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case BTN_ENTRAR:
			if (HIWORD(wParam) == BN_CLICKED) {
				if (ValidarLogin(hWnd)) {
					ShowWindow(hwndWndLogin, SW_HIDE); //Ocultamos la ventana de login
					MostrarVentanaPrincipal();
				}
			}
			break;
		default:
			break;
		}
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, mensaje, wParam, lParam);
		break;
	}

	return 0;
}

LRESULT CALLBACK procPerfil(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	static bool edicionActivada;
	switch (mensaje)
	{
	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case MENUPERFIL_EDITAR:
		{
			SetWindowLongPtr(GetDlgItem(hWnd, TXT_CEDULADOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_NUMBER);

			SetWindowLongPtr(GetDlgItem(hWnd, TXT_NOMBREDOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_UPPERCASE);

			SetWindowLongPtr(GetDlgItem(hWnd, TXT_APELLIDODOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_UPPERCASE);

			SetWindowLongPtr(GetDlgItem(hWnd, TXT_TELEFONODOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_NUMBER);

			SetWindowLongPtr(GetDlgItem(hWnd, TXT_CORREODOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_VISIBLE | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_UPPERCASE);

			ShowWindow(GetDlgItem(hWnd, BTN_GUARDARINFODOCTOR), SW_SHOW);
			ShowWindow(GetDlgItem(hWnd, BTN_CANCELAREDICION), SW_SHOW);
		}
			break;
		case BTN_GUARDARINFODOCTOR:
		{
			fstream fsDatosDoctor;
			char cedula[10], nombre[52], apellido[72], telefono[12], correo[52];

			fsDatosDoctor.open("DatosDoctor.txt", ios::binary | ios::trunc | ios::out);
			if (fsDatosDoctor.is_open()) {
				GetWindowText(GetDlgItem(hWnd, TXT_CEDULADOCTOR), cedula, 10);
				GetWindowText(GetDlgItem(hWnd, TXT_NOMBREDOCTOR), nombre, 52);
				GetWindowText(GetDlgItem(hWnd, TXT_APELLIDODOCTOR), apellido, 72);
				GetWindowText(GetDlgItem(hWnd, TXT_TELEFONODOCTOR), telefono, 12);
				GetWindowText(GetDlgItem(hWnd, TXT_CORREODOCTOR), correo, 52);

				//Guardamos los datos en el archivo de texto y dejamos un espacio más para el "\n"
				fsDatosDoctor.write(strcat(cedula, "\n"), strlen(cedula) + 1);
				fsDatosDoctor.write(strcat(nombre, "\n"), strlen(nombre) + 1);
				fsDatosDoctor.write(strcat(apellido, "\n"), strlen(apellido) + 1);
				fsDatosDoctor.write(strcat(telefono, "\n"), strlen(telefono) + 1);
				fsDatosDoctor.write(correo, strlen(correo));
				fsDatosDoctor.close();
				ShowWindow(GetDlgItem(hWnd, BTN_GUARDARINFODOCTOR), SW_HIDE);
				ShowWindow(GetDlgItem(hWnd, BTN_CANCELAREDICION), SW_HIDE);
				Mensajes::OperacionExitosa("¡Datos actualizados!");
			}
			else {
				Mensajes::Error();
			}
		}
		case BTN_CANCELAREDICION:
			SetWindowLongPtr(GetDlgItem(hWnd, TXT_CEDULADOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_NUMBER);

			SetWindowLongPtr(GetDlgItem(hWnd, TXT_NOMBREDOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_UPPERCASE);

			SetWindowLongPtr(GetDlgItem(hWnd, TXT_APELLIDODOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_UPPERCASE);

			SetWindowLongPtr(GetDlgItem(hWnd, TXT_TELEFONODOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_NUMBER);

			SetWindowLongPtr(GetDlgItem(hWnd, TXT_CORREODOCTOR), GWL_STYLE,
				WS_TABSTOP | WS_CHILD | WS_BORDER | ES_AUTOHSCROLL | ES_UPPERCASE);

			ShowWindow(GetDlgItem(hWnd, BTN_GUARDARINFODOCTOR), SW_HIDE);
			ShowWindow(GetDlgItem(hWnd, BTN_CANCELAREDICION), SW_HIDE);
			break;
		default:
			break;
		}
		break;
	case WM_PAINT:
	{
		HDC dcMem, dcCliente = NULL;
		PAINTSTRUCT ps;

		dcCliente = BeginPaint(hWnd, &ps);
		dcMem = CreateCompatibleDC(dcCliente);
		BITMAP bmFotoDoctor;
		SelectObject(dcMem, hbmFotoDoctor);
		GetObject(hbmFotoDoctor, sizeof(BITMAP), &bmFotoDoctor);
		BitBlt(dcCliente, 340, 20, bmFotoDoctor.bmWidth, bmFotoDoctor.bmHeight, dcMem, 0, 0, SRCCOPY);
		DeleteDC(dcMem);
		EndPaint(hWnd, &ps);
	}
	break;
	case WM_CTLCOLORSTATIC:
	{
		HDC hdcStatic = (HDC)wParam;

		if ((HWND)lParam == GetDlgItem(hWnd, TXT_CEDULADOCTOR)) break;
		if ((HWND)lParam == GetDlgItem(hWnd, TXT_NOMBREDOCTOR)) break;
		if ((HWND)lParam == GetDlgItem(hWnd, TXT_APELLIDODOCTOR)) break;
		if ((HWND)lParam == GetDlgItem(hWnd, TXT_TELEFONODOCTOR)) break;
		if ((HWND)lParam == GetDlgItem(hWnd, TXT_CORREODOCTOR)) break;

		if ((HWND)lParam == GetDlgItem(hWnd, LBL_INFODOCTOR_ERROR)) {
			HBRUSH hbrushStaticBackground = CreateSolidBrush(RGB(255, 0, 0));
			SetBkColor(hdcStatic, RGB(255, 0, 0));
			return (LRESULT)hbrushStaticBackground;
		}

		HBRUSH hbrushStaticBackground = CreateSolidBrush(RGB(136, 188, 255));

		SetBkColor(hdcStatic, RGB(136, 188, 255));
		return (LRESULT)hbrushStaticBackground;
	}
	break;
	case WM_CREATE:
	{
		InsertarControlesPerfil(hWnd);

		fstream fileDatosDoctor;
		fileDatosDoctor.open("DatosDoctor.txt");
		if (fileDatosDoctor.is_open()) {
			string linea;
			fileDatosDoctor.eof();
			getline(fileDatosDoctor, linea);
			SetWindowText(GetDlgItem(hWnd, TXT_CEDULADOCTOR), linea.c_str());
			fileDatosDoctor.eof();
			getline(fileDatosDoctor, linea);
			SetWindowText(GetDlgItem(hWnd, TXT_NOMBREDOCTOR), linea.c_str());
			fileDatosDoctor.eof();
			getline(fileDatosDoctor, linea);
			SetWindowText(GetDlgItem(hWnd, TXT_APELLIDODOCTOR), linea.c_str());
			fileDatosDoctor.eof();
			getline(fileDatosDoctor, linea);
			SetWindowText(GetDlgItem(hWnd, TXT_TELEFONODOCTOR), linea.c_str());
			fileDatosDoctor.eof();
			getline(fileDatosDoctor, linea);
			SetWindowText(GetDlgItem(hWnd, TXT_CORREODOCTOR), linea.c_str());
		}
		else {
			Mensajes::Error();
		}
		fileDatosDoctor.close();
	}
	break;
	case WM_CLOSE:
		DestroyWindow(hWnd);
		break;
	default:
		return DefWindowProc(hWnd, mensaje, wParam, lParam);
		break;
	}
	return 0;
}

LRESULT CALLBACK procCitaNueva(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case BTN_LIMPIARREGISTRARCITA:
			LimpiarCamposRegistroCita();
			break;
		case BTN_REGISTRARCITA:
			AgregarCita();
			break;
		default:
			break;
		}
		break;
	case WM_CTLCOLORSTATIC:
	{
		if ((HWND)lParam == GetDlgItem(hWnd, TXT_NUMEROCITA)) break;
		if ((HWND)lParam == GetDlgItem(hWnd, TXT_COSTOCITA)) break;

		HBRUSH hbrStatics = CreateSolidBrush(RGB(153, 153, 153));
		SetBkColor((HDC)wParam, RGB(153, 153, 153));
		return (LRESULT)hbrStatics;
	}
	break;
	case WM_CREATE:
		InsertarControlesCitaNueva(hWnd);
		//SetFocus(GetDlgItem(GetDlgItem(hWnd,GRP_DATOSCITA),DT_FECHACITA));
		break;
	case WM_CLOSE:
		DestroyWindow(hWnd);
		break;
	default:
		return DefWindowProc(hWnd, mensaje, wParam, lParam);
	}
	return 0;
}

LRESULT CALLBACK procConfig(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_CLOSE:
		DestroyWindow(hWnd);
		break;
	default:
		return DefWindowProc(hWnd, mensaje, wParam, lParam);
	}
}

LRESULT CALLBACK procAgenda(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_CREATE:
	{
		CargarDatosCita();
		InsertarControlesAgenda(hWnd);
	}
	break;
	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case MENU_PERFIL:
			if (IsWindowVisible(hwndWndPerfil)) break;
			hwndWndPerfil = CreateWindowEx(0, "wcWndPerfil", "Perfil",
				WS_SYSMENU | WS_VISIBLE,
				0, 0, 521, 300, NULL, NULL, hInst, NULL);
			SetWindowPos(hwndWndPerfil, 0, CenterToScreenX(hwndWndPerfil), CenterToScreenY(hwndWndPerfil), 0, 0, SWP_NOZORDER | SWP_NOSIZE);
			ShowWindow(hwndWndPerfil, SW_SHOW);
			break;
		case MENU_CITAS_NUEVA:
			if (IsWindowVisible(hwndWndCitaNueva)) break;
			hwndWndCitaNueva = CreateWindowEx(0, "wcWndCitaNueva", "Agendar nueva cita",
				WS_VISIBLE | WS_SYSMENU, CW_USEDEFAULT, CW_USEDEFAULT,
				600, 560, NULL, NULL, hInst, NULL);
			ShowWindow(hwndWndCitaNueva, SW_SHOW);
			SetWindowPos(hwndWndCitaNueva, 0, CenterToScreenX(hwndWndCitaNueva), CenterToScreenY(hwndWndCitaNueva), 0, 0, SWP_NOZORDER | SWP_NOSIZE);
			break;
		case MENU_SALIR:
			ConfirmarSalir();
			break;
		}
		break;
	case WM_CLOSE:
	{
		ConfirmarSalir();
	}
	break;
	case WM_DESTROY:
		//Destruimos los objetos globales
		DeleteObject(hbmFotoDoctor);
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, mensaje, wParam, lParam);
		break;
	}
}

LRESULT CALLBACK procTxtContra(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_GETDLGCODE:
		if (LOWORD(wParam) == VK_RETURN) {
			if (ValidarLogin(hwndWndLogin)) {
				ShowWindow(hwndWndLogin, SW_HIDE);
				MostrarVentanaPrincipal();
			}
		}
		else {
			return CallWindowProc(wndprocTxtContra, hWnd, mensaje, wParam, lParam);
		}
		break;
	default:
		return CallWindowProc(wndprocTxtContra, hWnd, mensaje, wParam, lParam);
		break;
	}
	return 0;
}

LRESULT CALLBACK procTxtCedula(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
	{
		char cedula[20];
		byte tamanoCedula = 0;

		GetWindowText(GetDlgItem(hwndWndPerfil, TXT_CEDULADOCTOR), cedula, 20);
		string strCedula(cedula);
		//Validamos que solo inserte números
		if (!EsNumero(strCedula)) {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "La cédula solo puede contener números");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_SHOWNOACTIVATE);
			break;
		}
		else {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_HIDE);
		}

		//Validamos que no sobrepasé el límite
		tamanoCedula = strlen(cedula);
		if (LOWORD(wParam) == VK_BACK)
		{
			if (tamanoCedula > 0)
				tamanoCedula--;
		}
		else
			tamanoCedula++;
		if (tamanoCedula > 8) {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "La cédula no puede sobrepasar los 8 dígitos");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_SHOWNOACTIVATE);
		}
		else {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_HIDE);
		}
	}
	break;
	default:
		return CallWindowProc(wndprocTxtCedula, hWnd, mensaje, wParam, lParam);
		break;
	}
}

LRESULT CALLBACK procTxtNombre(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
	{
		char nombre[50];
		GetWindowText(GetDlgItem(hwndWndPerfil, TXT_NOMBREDOCTOR), nombre, 50);
		string strNombre(nombre);

		if (!EsTexto(strNombre)) {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "El nombre solo puede contener letras");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_SHOWNOACTIVATE);
			break;
		}
		else {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_HIDE);
		}
	}
	break;
	default:
		return CallWindowProc(wndprocTxtNombre, hWnd, mensaje, wParam, lParam);
		break;
	}
}

LRESULT CALLBACK procTxtApellido(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
	{
		char apellido[70];
		GetWindowText(GetDlgItem(hwndWndPerfil, TXT_APELLIDODOCTOR), apellido, 70);
		string strApellido(apellido);

		if (!EsTexto(strApellido)) {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "El apellido solo puede contener letras");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_SHOWNOACTIVATE);
			break;
		}
		else {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_HIDE);
		}
	}
	break;
	default:
		return CallWindowProc(wndprocTxtApellido, hWnd, mensaje, wParam, lParam);
		break;
	}
}

LRESULT CALLBACK procTxtTelefono(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
	{
		char telefono[20];
		byte tamanoTelefono;
		GetWindowText(GetDlgItem(hwndWndPerfil, TXT_TELEFONODOCTOR), telefono, 20);
		string strTelefono(telefono);

		//Validamos que solo sean números
		if (!EsNumero(strTelefono)) {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "El teléfono solo puede contener números");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_SHOWNOACTIVATE);
			break;
		}
		else {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_HIDE);
		}

		//Validamos que solo pueda tener como máximo 10 digitos
		tamanoTelefono = strlen(telefono);
		if (LOWORD(wParam) == VK_BACK)
		{
			if (tamanoTelefono > 0)
				tamanoTelefono--;
		}
		else
		{
			switch (LOWORD(wParam))
			{
			case 0x30:case 0x60:
			case 0x31:case 0x61:
			case 0x32:case 0x62:
			case 0x33:case 0x63:
			case 0x34:case 0x64:
			case 0x35:case 0x65:
			case 0x36:case 0x66:
			case 0x37:case 0x67:
			case 0x38:case 0x68:
			case 0x39:case 0x69:
				tamanoTelefono++;
			}
		}

		if (tamanoTelefono > 10) {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "El teléfono no puede sobrepasar los 10 dígitos");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_SHOWNOACTIVATE);
		}
		else {
			SetWindowText(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), "");
			ShowWindow(GetDlgItem(hwndWndPerfil, LBL_INFODOCTOR_ERROR), SW_HIDE);
		}
	}
	break;
	default:
		return CallWindowProc(wndprocTxtApellido, hWnd, mensaje, wParam, lParam);
	}
}

bool EsNumero(string miCadena) {
	for (int i = 0; i < miCadena.length(); i++) {
		if (!(miCadena[i] >= '0' && miCadena[i] <= '9')) return false;
	}
	return true;
}

bool EsTexto(string miCadena) {
	int i;
	for (i = 0; i < miCadena.length(); i++) {
		if (!(miCadena[i] >= 'A' && miCadena[i] <= 'Z') && !(miCadena[i] >= 'a' && miCadena[i] <= 'z') && miCadena[i] == 8)
			return false;
	}
	return true;
}

void DesglozarFecha(string cadena, byte *dia, byte *mes, unsigned int *ano) {
	*dia = (byte)atoi(cadena.substr(0, 2).c_str());
	*mes = (byte)atoi(cadena.substr(3, 2).c_str());
	*ano = atoi(cadena.substr(6, 4).c_str());
}

void DesglozarTiempo(string cadena, byte *hora, byte *minuto) {
	*hora = (byte)atoi(cadena.substr(0, 2).c_str());
	*minuto = (byte)atoi(cadena.substr(3, 2).c_str());
}

void AgregarCita() {
	if (!ValidarCita()) return; //Antes que nada validamos que toda la información esté validada

	//Variables
	string sTexto;
	char textoCorto[255], textoLargo[1024];

	//Variables de datos de la cita
	unsigned int numCita;
	byte dia, mes, hora, minuto;
	unsigned int ano;
	float costo;
	string strFecha, strHora, motivo;

	//Variables de datos del cliente
	string nombreCliente, apellidoCliente, telefonoCliente;
	//Variables de datos de la mascota
	string nombreMascota, especieMascota;
	bool esMacho;

	HWND hwndGrpDatosCita = GetDlgItem(hwndWndCitaNueva, GRP_DATOSCITA);
	HWND hwndGrpDatosCliente = GetDlgItem(hwndWndCitaNueva, GRP_DATOSCLIENTE);
	HWND hwndGrpDatosMascota = GetDlgItem(hwndWndCitaNueva, GRP_DATOSMASCOTA);

	GetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_NUMEROCITA), textoCorto, 255);
	numCita = atoi(textoCorto);
	GetWindowText(GetDlgItem(hwndGrpDatosCita, DT_FECHACITA), textoCorto, 255);
	strFecha = textoCorto;
	sTexto = textoCorto;
	DesglozarFecha(sTexto, &dia, &mes, &ano);
	GetWindowText(GetDlgItem(hwndGrpDatosCita, DT_HORACITA), textoCorto, 255);
	strHora = textoCorto;
	sTexto = textoCorto;
	DesglozarTiempo(sTexto, &hora, &minuto);
	GetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_COSTOCITA), textoCorto, 255);
	costo = stof(textoCorto);
	GetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_MOTIVOCONSULTA), textoCorto, 255);
	motivo = textoCorto;

	GetWindowText(GetDlgItem(hwndGrpDatosCliente, TXT_NOMBRECLIENTE), textoCorto, 255);
	nombreCliente = textoCorto;
	GetWindowText(GetDlgItem(hwndGrpDatosCliente, TXT_APELLIDOCLIENTE), textoCorto, 255);
	apellidoCliente = textoCorto;
	GetWindowText(GetDlgItem(hwndGrpDatosCliente, TXT_TELEFONOCLIENTE), textoCorto, 255);
	telefonoCliente = textoCorto;

	GetWindowText(GetDlgItem(hwndGrpDatosMascota, TXT_NOMBREMASCOTA), textoCorto, 255);
	nombreMascota = textoCorto;
	GetWindowText(GetDlgItem(hwndGrpDatosMascota, CB_ESPECIEMASCOTA), textoCorto, 255);
	especieMascota = textoCorto;
	if (IsDlgButtonChecked(hwndGrpDatosMascota, RB_MACHOMASCOTA) == BST_CHECKED)
		esMacho = true;
	else
		esMacho = false;

	aux = origen;

	if (origen == NULL) {
		aux = new Cita;
		aux->ant = NULL;
		aux->sig = NULL;
		origen = aux;
		ultimo = aux;

		//Llenamos los datos
		aux->datosCita.NumCita = 1;
		aux->datosCita.fechaCita.dia = dia;
		aux->datosCita.fechaCita.mes = mes;
		aux->datosCita.fechaCita.ano = ano;
		aux->datosCita.fechaCita.fechaCompleta = strFecha;
		aux->datosCita.horaCita.hora = hora;
		aux->datosCita.horaCita.minuto = minuto;
		aux->datosCita.horaCita.horaCompleta = strHora;
		aux->datosCita.costo = costo;
		aux->datosCita.motivoConsulta = motivo;
		aux->datosCliente.nombre = nombreCliente;
		aux->datosCliente.apellido = apellidoCliente;
		aux->datosCliente.telefono = telefonoCliente;
		aux->datosMascota.nombre = nombreMascota;
		aux->datosMascota.especie = especieMascota;
		aux->datosMascota.esMacho = esMacho;

	}
	else {
		ultimo->sig = new Cita;
		aux = ultimo->sig;
		aux->sig = NULL;
		aux->ant = ultimo;
		ultimo = aux;

		//Llenamos los datos
		aux->datosCita.NumCita = numCita;
		aux->datosCita.fechaCita.dia = dia;
		aux->datosCita.fechaCita.mes = mes;
		aux->datosCita.fechaCita.ano = ano;
		aux->datosCita.fechaCita.fechaCompleta = strFecha;
		aux->datosCita.horaCita.hora = hora;
		aux->datosCita.horaCita.minuto = minuto;
		aux->datosCita.horaCita.horaCompleta = strHora;
		aux->datosCita.costo = costo;
		aux->datosCita.motivoConsulta = motivo;
		aux->datosCliente.nombre = nombreCliente;
		aux->datosCliente.apellido = apellidoCliente;
		aux->datosCliente.telefono = telefonoCliente;
		aux->datosMascota.nombre = nombreMascota;
		aux->datosMascota.especie = especieMascota;
		aux->datosMascota.esMacho = esMacho;

	}

	LimpiarCamposRegistroCita();
	SetWindowText(GetDlgItem(GetDlgItem(hwndWndCitaNueva, GRP_DATOSCITA), TXT_NUMEROCITA), TraerNumNuevaCita().c_str());
	Mensajes::OperacionExitosa("Se ha agregado la cita a su agenda correctamente");
}

void GuardarTodo() {
	fstream archivo;

	aux = origen;
	archivo.open("DatosCitas.txt", ios::trunc | ios::binary | ios::out);
	if (archivo.is_open()) {
		while (aux != NULL) {
			archivo.write(reinterpret_cast<char *>(aux), sizeof(Cita));
			aux = aux->sig;
		}
		archivo.close();
	}
	else {
		Mensajes::Error();
	}
}

void CargarDatosCita() {
	fstream archivo;
	aux = origen = NULL;

	archivo.open("DatosCitas.txt", ios::binary | ios::in | ios::ate);
	if (archivo.is_open()) {
		int size = archivo.tellg();//Obtenemos el tamaño en bytes del archivo
		for (int i = 0; i < size / sizeof(Cita); i++)
		{
			if (origen == NULL)
			{
				origen = new Cita;
				aux = origen;
				Cita *temp = new Cita;
				archivo.seekg(0);//Nos posicionamos al principio del archivo
				archivo.read(reinterpret_cast<char*>(temp), sizeof(Cita));
				aux->datosCita.NumCita = temp->datosCita.NumCita;
				aux->datosCita.fechaCita.dia = temp->datosCita.fechaCita.dia;
				aux->datosCita.fechaCita.mes = temp->datosCita.fechaCita.mes;
				aux->datosCita.fechaCita.ano = temp->datosCita.fechaCita.ano;
				aux->datosCita.fechaCita.fechaCompleta = temp->datosCita.fechaCita.fechaCompleta;
				aux->datosCita.horaCita.hora = temp->datosCita.horaCita.hora;
				aux->datosCita.horaCita.minuto = temp->datosCita.horaCita.minuto;
				aux->datosCita.horaCita.horaCompleta = temp->datosCita.horaCita.horaCompleta;
				aux->datosCita.costo = temp->datosCita.costo;
				aux->datosCita.motivoConsulta = temp->datosCita.motivoConsulta;
				aux->datosCliente.nombre = temp->datosCliente.nombre;
				aux->datosCliente.apellido = temp->datosCliente.apellido;
				aux->datosCliente.telefono = temp->datosCliente.telefono;
				aux->datosMascota.nombre = temp->datosMascota.nombre;
				aux->datosMascota.especie = temp->datosMascota.especie;
				aux->datosMascota.esMacho = temp->datosMascota.esMacho;
				aux->ant = NULL;
				aux->sig = NULL;
				delete reinterpret_cast<char*>(temp);
				ultimo = aux;
				//continue;
			}
			else {
				ultimo->sig = new Cita;
				aux = ultimo->sig;
				aux->ant = ultimo;
				aux->sig = NULL;

				Cita *temp = new Cita;
				archivo.seekg(i * sizeof(Cita));
				archivo.read(reinterpret_cast<char*>(temp), sizeof(Cita));

				aux->datosCita.NumCita = temp->datosCita.NumCita;
				aux->datosCita.fechaCita.dia = temp->datosCita.fechaCita.dia;
				aux->datosCita.fechaCita.mes = temp->datosCita.fechaCita.mes;
				aux->datosCita.fechaCita.ano = temp->datosCita.fechaCita.ano;
				aux->datosCita.fechaCita.fechaCompleta = temp->datosCita.fechaCita.fechaCompleta;
				aux->datosCita.horaCita.hora = temp->datosCita.horaCita.hora;
				aux->datosCita.horaCita.minuto = temp->datosCita.horaCita.minuto;
				aux->datosCita.horaCita.horaCompleta = temp->datosCita.horaCita.horaCompleta;
				aux->datosCita.costo = temp->datosCita.costo;
				aux->datosCita.motivoConsulta = temp->datosCita.motivoConsulta;
				aux->datosCliente.nombre = temp->datosCliente.nombre;
				aux->datosCliente.apellido = temp->datosCliente.apellido;
				aux->datosCliente.telefono = temp->datosCliente.telefono;
				aux->datosMascota.nombre = temp->datosMascota.nombre;
				aux->datosMascota.especie = temp->datosMascota.especie;
				aux->datosMascota.esMacho = temp->datosMascota.esMacho;
				delete reinterpret_cast<char*>(temp);

				ultimo = aux;
			}
		}
	}
}

bool ValidarCita() {
	//Declaración de variables
	char textoCorto[255], textoLargo[1024];

	byte dia, mes;
	byte hora, minuto;
	unsigned int ano;

	string strNumCita, strFechaCita, strHoraCita, strCostoCita, strMotivoCita;
	string strNombreCliente, strApellidoCliente, strTelefonoCliente;
	string strNombreMascota, strEspecieMascota;

	HWND hwndGrpDatosCita = GetDlgItem(hwndWndCitaNueva, GRP_DATOSCITA);
	HWND hwndGrpDatosCliente = GetDlgItem(hwndWndCitaNueva, GRP_DATOSCLIENTE);
	HWND hwndGrpDatosMascota = GetDlgItem(hwndWndCitaNueva, GRP_DATOSMASCOTA);

	//Obtenemos los datos del formulario
	{
		GetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_NUMEROCITA), textoCorto, 255);
		strNumCita = textoCorto;
		GetWindowText(GetDlgItem(hwndGrpDatosCita, DT_FECHACITA), textoCorto, 255);
		strFechaCita = textoCorto;
		DesglozarFecha(strFechaCita, &dia, &mes, &ano);
		GetWindowText(GetDlgItem(hwndGrpDatosCita, DT_HORACITA), textoCorto, 255);
		strHoraCita = textoCorto;
		DesglozarTiempo(strHoraCita, &hora, &minuto);
		GetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_COSTOCITA), textoCorto, 255);
		strCostoCita = textoCorto;
		GetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_MOTIVOCONSULTA), textoLargo, 1024);
		strMotivoCita = textoLargo;

		GetWindowText(GetDlgItem(hwndGrpDatosCliente, TXT_NOMBRECLIENTE), textoCorto, 255);
		strNombreCliente = textoCorto;
		GetWindowText(GetDlgItem(hwndGrpDatosCliente, TXT_APELLIDOCLIENTE), textoCorto, 255);
		strApellidoCliente = textoCorto;
		GetWindowText(GetDlgItem(hwndGrpDatosCliente, TXT_TELEFONOCLIENTE), textoCorto, 255);
		strTelefonoCliente = textoCorto;

		GetWindowText(GetDlgItem(hwndGrpDatosMascota, TXT_NOMBREMASCOTA), textoCorto, 255);
		strNombreMascota = textoCorto;
		GetWindowText(GetDlgItem(hwndGrpDatosMascota, CB_ESPECIEMASCOTA), textoCorto, 255);
		strEspecieMascota = textoCorto;
	}

	//Validamos que no haya datos vacios
	{
		if (strCostoCita == "") {
			Mensajes::OperacionNoValida("El campo 'Costo' se encuentra vacío");
			SetFocus(GetDlgItem(hwndGrpDatosCita, TXT_COSTOCITA));
			return false;
		}
		if (strMotivoCita == "") {
			Mensajes::OperacionNoValida("El campo 'Motivo de la consulta' se encuentra vacío");
			SetFocus(GetDlgItem(hwndGrpDatosCita, TXT_MOTIVOCONSULTA));
			return false;
		}

		if (strNombreCliente == "") {
			Mensajes::OperacionNoValida("El campo 'Nombre del cliente' se encuentra vacío");
			SetFocus(GetDlgItem(hwndGrpDatosCliente, TXT_NOMBRECLIENTE));
			return false;
		}
		if (strApellidoCliente == "") {
			Mensajes::OperacionNoValida("El campo 'Apellido del cliente' se encuentra vacío");
			SetFocus(GetDlgItem(hwndGrpDatosCliente, TXT_APELLIDOCLIENTE));
			return false;
		}
		if (strTelefonoCliente == "") {
			Mensajes::OperacionNoValida("El campo 'Teléfono' se encuentra vacío");
			SetFocus(GetDlgItem(hwndGrpDatosCliente, TXT_TELEFONOCLIENTE));
			return false;
		}

		if (strNombreMascota == "") {
			Mensajes::OperacionNoValida("El campo 'Nombre de la mascota' se encuentra vacío");
			SetFocus(GetDlgItem(hwndGrpDatosMascota, TXT_NOMBREMASCOTA));
			return false;
		}
		if (strEspecieMascota == "") {
			Mensajes::OperacionNoValida("El campo 'Especie de la mascota' se encuentra vacío");
			SetFocus(GetDlgItem(hwndGrpDatosMascota, CB_ESPECIEMASCOTA));
			return false;
		}
	}

	//--------------- Hacemos otro tipo de validaciones ---------------------//
	//Validamos que no haya puesto una fecha pasada

	//Validamos que el costo de la cita sea correcto

	Fecha fechaCita, fechaHoy;
	fechaCita.dia = dia;
	fechaCita.mes = mes;
	fechaCita.ano = ano;

	Hora horaCita, horaActual;
	horaCita.hora = hora;
	horaCita.minuto = minuto;

	time_t tiempo = time(0);
	tm *tiempoDesglozado = localtime(&tiempo);

	fechaHoy.dia = tiempoDesglozado->tm_mday;
	fechaHoy.mes = tiempoDesglozado->tm_mon + 1;
	fechaHoy.ano = tiempoDesglozado->tm_year + 1900;

	//char nHoraActual[40];
	//strftime(nHoraActual, 40, "%I:%M:%S", tiempoDesglozado);

	horaActual.hora = tiempoDesglozado->tm_hour;
	horaActual.minuto = tiempoDesglozado->tm_min;
	/*if (horaActual.hora > 12) horaActual.periodo = 'p';
	else horaActual.periodo = 'a';*/

	int resultadoFecha = CompararFecha(fechaCita, fechaHoy);

	if (resultadoFecha == -1)
	{
		Mensajes::OperacionNoValida("Ingrese una fecha de cita válida");
		SetFocus(GetDlgItem(hwndGrpDatosCita, DT_FECHACITA));
		return false;
	}
	else if (resultadoFecha == 0) {
		if (CompararHora(horaCita, horaActual) == -1 || CompararHora(horaCita, horaActual) == 0)
		{
			Mensajes::OperacionNoValida("Ingrese una hora de cita válida");
			SetFocus(GetDlgItem(hwndGrpDatosCita, DT_HORACITA));
			return false;
		}
	}

	if (!EsMoneda(strCostoCita))
	{
		Mensajes::OperacionNoValida("Inrese un monto correcto (Ej. 000.00)");
		SetFocus(GetDlgItem(hwndGrpDatosCita, TXT_COSTOCITA));
		return false;
	}

	if (!EsTexto(strNombreCliente)) {
		Mensajes::OperacionNoValida("El nombre del cliente solo puede contener texto");
		SetFocus(GetDlgItem(hwndGrpDatosCliente, TXT_NOMBRECLIENTE));
		return false;
	}

	if (!EsTexto(strApellidoCliente)) {
		Mensajes::OperacionNoValida("El apellido del cliente solo puede contener texto");
		SetFocus(GetDlgItem(hwndGrpDatosCliente, TXT_APELLIDOCLIENTE));
		return false;
	}

	if (!EsTexto(strNombreMascota)) {
		Mensajes::OperacionNoValida("El nombre de la mascota solo puede contener texto");
		SetFocus(GetDlgItem(hwndGrpDatosMascota, TXT_NOMBREMASCOTA));
		return false;
	}

	if (!(strTelefonoCliente.length() == 8 || strTelefonoCliente.length() == 10 || strTelefonoCliente.length() == 12)) {
		Mensajes::OperacionNoValida("El número de teléfono solo puede contener 8, 10 u 12 caracteres");
		SetFocus(GetDlgItem(hwndGrpDatosCliente, TXT_TELEFONOCLIENTE));
		return false;
	}

	if (!EsNumero(strTelefonoCliente)) {
		Mensajes::OperacionNoValida("El número de teléfono solo debe contener números");
		SetFocus(GetDlgItem(hwndGrpDatosCliente, TXT_TELEFONOCLIENTE));
		return false;
	}

	return true;
}

void LimpiarCamposRegistroCita() {
	HWND hwndGrpDatosCita = GetDlgItem(hwndWndCitaNueva, GRP_DATOSCITA);
	HWND hwndGrpDatosCliente = GetDlgItem(hwndWndCitaNueva, GRP_DATOSCLIENTE);
	HWND hwndGrpDatosMascota = GetDlgItem(hwndWndCitaNueva, GRP_DATOSMASCOTA);

	SetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_NUMEROCITA), "");
	SetWindowText(GetDlgItem(hwndGrpDatosCita, DT_HORACITA), "10:00:00 p.m.");
	SetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_COSTOCITA), "");
	SetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_MOTIVOCONSULTA), "");

	SetWindowText(GetDlgItem(hwndGrpDatosCliente, TXT_NOMBRECLIENTE), "");
	SetWindowText(GetDlgItem(hwndGrpDatosCliente, TXT_APELLIDOCLIENTE), "");
	SetWindowText(GetDlgItem(hwndGrpDatosCliente, TXT_TELEFONOCLIENTE), "");

	SetWindowText(GetDlgItem(hwndGrpDatosMascota, TXT_NOMBREMASCOTA), "");
	SendMessage(GetDlgItem(hwndGrpDatosMascota, CB_ESPECIEMASCOTA), CB_SELECTSTRING, 0, (LPARAM)"PERRO");

	SetWindowText(GetDlgItem(hwndGrpDatosCita, TXT_NUMEROCITA), TraerNumNuevaCita().c_str());
	CheckRadioButton(hwndGrpDatosMascota, RB_MACHOMASCOTA, RB_HEMBRAMASCOTA, RB_MACHOMASCOTA);
}

void ConfirmarSalir() {
	//int respuesta = MessageBox(hwndWndPrincipal, "¿Realmente deseas salir de la aplicación?", "Confirmación", MB_YESNO | MB_DEFBUTTON2 | MB_ICONQUESTION);
	int respuesta = Mensajes::Confirmacion("¿Realmente deseas salir de la aplicación?");
	if (respuesta == IDYES) {
		GuardarTodo();
		DestroyWindow(hwndWndAgenda);
	}
}

string TraerNumNuevaCita() {
	//Traemos el último registro y le sumamos 1, sino entonces retornamos 1
	return ultimo != NULL ? to_string(ultimo->datosCita.NumCita + 1) : "1";
}

bool EstaVacio(string cadena) {
	return cadena == "" ? true : false;
}

bool EsMoneda(string cadena) {
	byte punto = 0;
	for (int i = 0; i < cadena.length(); i++) {
		if (cadena[i] == '.') punto++;
		if (punto > 1) return false;
		if (!(cadena[i] >= '0' && cadena[i] <= '9')) return false;
	}
	return true;
}

int CompararFecha(Fecha fecha1, Fecha fecha2)
{
	int val;

	if (fecha1.ano < fecha2.ano)
		val = -1;
	else if (fecha1.ano > fecha2.ano)
		val = 1;
	else {
		if (fecha1.mes < fecha2.mes)
			val = -1;
		else if (fecha1.mes > fecha2.mes)
			val = 1;
		else {
			if (fecha1.dia < fecha2.dia)
				val = -1;
			else if (fecha1.dia > fecha2.dia)
				val = 1;
			else
				val = 0;
		}
	}

	return val;
}

int CompararHora(Hora hora1, Hora hora2) {
	int val;

	if (hora1.hora < hora2.hora)
		val = -1;
	else if (hora1.hora > hora2.hora)
		val = 1;
	else {
		if (hora1.minuto < hora2.minuto)
			val = -1;
		else if (hora1.minuto > hora2.minuto)
			val = 1;
		else {
			val = 0;
		}
	}

	return val;
}

LRESULT CALLBACK procRegCitaFechaCita(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
		switch (LOWORD(wParam))
		{
		case VK_TAB:
			SetFocus(GetDlgItem(GetDlgItem(hwndWndCitaNueva, GRP_DATOSCITA), DT_HORACITA));
			break;
		default:
			break;
		}
		break;
	default:
		return CallWindowProc(wndprocRegCitaFechaCita,hWnd,mensaje,wParam,lParam);
	}
}

LRESULT CALLBACK procRegCitaHoraCita(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
		switch (LOWORD(wParam))
		{
		case VK_TAB:
			SetFocus(GetDlgItem(GetDlgItem(hwndWndCitaNueva, GRP_DATOSCITA), TXT_COSTOCITA));
			break;
		default:
			break;
		}
		break;
	default:
		return CallWindowProc(wndprocRegCitaHoraCita, hWnd, mensaje, wParam, lParam);
	}
}

LRESULT CALLBACK procRegCitaCostoCita(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
		switch (LOWORD(wParam))
		{
		case VK_TAB:
			SetFocus(GetDlgItem(GetDlgItem(hwndWndCitaNueva, GRP_DATOSCITA), TXT_MOTIVOCONSULTA));
			break;
		default:
			break;
		}
		break;
	default:
		return CallWindowProc(wndprocRegCitaCostoCita, hWnd, mensaje, wParam, lParam);
	}
}

LRESULT CALLBACK procRegCitaMotivoCita(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
		switch (LOWORD(wParam))
		{
		case VK_TAB:
			SetFocus(GetDlgItem(GetDlgItem(hwndWndCitaNueva, GRP_DATOSCLIENTE), TXT_NOMBRECLIENTE));
			break;
		default:
			break;
		}
		break;
	default:
		return CallWindowProc(wndprocRegCitaMotivoCita, hWnd, mensaje, wParam, lParam);
	}
}

LRESULT CALLBACK procRegCitaNombreCliente(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
		switch (LOWORD(wParam))
		{
		case VK_TAB:
			SetFocus(GetDlgItem(GetDlgItem(hwndWndCitaNueva, GRP_DATOSCLIENTE), TXT_APELLIDOCLIENTE));
			break;
		default:
			break;
		}
		break;
	default:
		return CallWindowProc(wndprocRegCitaNombreCliente, hWnd, mensaje, wParam, lParam);
	}
}

LRESULT CALLBACK procRegCitaApellidoCliente(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
		switch (LOWORD(wParam))
		{
		case VK_TAB:
			SetFocus(GetDlgItem(GetDlgItem(hwndWndCitaNueva, GRP_DATOSCLIENTE), TXT_TELEFONOCLIENTE));
			break;
		default:
			break;
		}
		break;
	default:
		return CallWindowProc(wndprocRegCitaApellidoCliente, hWnd, mensaje, wParam, lParam);
	}
}

LRESULT CALLBACK procRegCitaTelefonoCliente(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
		switch (LOWORD(wParam))
		{
		case VK_TAB:
			SetFocus(GetDlgItem(GetDlgItem(hwndWndCitaNueva, GRP_DATOSMASCOTA), TXT_NOMBREMASCOTA));
			break;
		default:
			break;
		}
		break;
	default:
		return CallWindowProc(wndprocRegCitaTelefonoCliente, hWnd, mensaje, wParam, lParam);
	}
}

LRESULT CALLBACK procRegCitaNombreMascota(HWND hWnd, UINT mensaje, WPARAM wParam, LPARAM lParam) {
	switch (mensaje)
	{
	case WM_KEYDOWN:
		switch (LOWORD(wParam))
		{
		case VK_TAB:
			SetFocus(GetDlgItem(GetDlgItem(hwndWndCitaNueva, GRP_DATOSMASCOTA), CB_ESPECIEMASCOTA));
			break;
		default:
			break;
		}
		break;
	default:
		return CallWindowProc(wndprocRegCitaNombreMascota, hWnd, mensaje, wParam, lParam);
	}
}